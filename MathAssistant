from tkinter import *
from tkinter.ttk import Combobox
import tkinter.messagebox as mb
import math
import random
import MyMathlib as mml

def calc():
    win = Tk()
    win["bg"]="antiquewhite"
    def fcalc(event):
        result.configure(text=str(eval(pole.get())))
    inputer = Label(win, text="Введите выражение(вместо запятой используйте точку!): (Разрешенные символы:", bg="antiquewhite").grid(row=4)
    inputer1 = Label(win, text="цифры,'//'-деление нацело,'%'-остаток,'()'-скобки,", bg="antiquewhite").grid(row=5)
    inputer2 = Label(win, text="'+', '-', '*', '/'-арифметические действия,'**'-степень)", bg="antiquewhite").grid(row=6)
    pole = Entry(win, width=78)
    pole.bind("<Return>", fcalc)
    pole.grid(row=7, column=0)
    result = Label(win)
    result.grid(row=8, column=0)
    win.mainloop()

def square():
    win = Tk()
    win["bg"]="antiquewhite"
    def fsq(event):
        result.configure(text=str(math.sqrt(int(pole.get()))))
    inputer = Label(win, text="Введите число, у которого нужно найти приближенное значение кв.корня", bg="antiquewhite").grid(row=9)
    pole = Entry(win)
    pole.bind("<Return>", fsq)
    pole.grid(row=10, column=0)
    result = Label(win)
    result.grid(row=11, column=0)
    win.mainloop()
def factoriale():
    win = Tk()
    win["bg"]="antiquewhite"
    def fa(event):
            result.configure(text=str(math.factorial(int(pole.get()))))
    inputer = Label(win, text="Введите число, у которого нужно найти факториал", bg="antiquewhite").grid(row=12)
    pole = Entry(win)
    pole.bind("<Return>", fa)
    pole.grid(row=13, column=0)
    result = Label(win)
    result.grid(row=14, column=0)
    win.mainloop()

def sin():
    win= Tk()
    win["bg"]="antiquewhite"
    def fsin(event):
        result.configure(text=str(math.sin(math.radians(int(pole.get())))))

    inputer = Label(win, text="Введите число, у которого нужно найти синус", bg="antiquewhite").grid(row=15)
    pole = Entry(win)
    pole.bind("<Return>", fsin)
    pole.grid(row=16, column=0)
    result = Label(win)
    result.grid(row=17, column=0)
    win.mainloop()

def cos():
    win = Tk()
    win["bg"]="antiquewhite"
    def fcos(event):
        result.configure(text=str(math.cos(math.radians(int(pole.get())))))

    inputer = Label(win, text="Введите число, у которого нужно найти косинус", bg="antiquewhite").grid(row=18)
    pole = Entry(win)
    pole.bind("<Return>", fcos)
    pole.grid(row=19, column=0)
    result = Label(win)
    result.grid(row=20, column=0)
    win.mainloop()

def tg():
    win = Tk()
    win["bg"]="antiquewhite"
    def ftg(event):
        result.configure(text=str(math.tan(math.radians(int(pole.get())))))

    inputer = Label(win, text="Введите число, у которого нужно найти тангенс", bg="antiquewhite").grid(row=21)
    pole = Entry(win)
    pole.bind("<Return>", ftg)
    pole.grid(row=22, column=0)
    result = Label(win)
    result.grid(row=23, column=0)
    win.mainloop()

def ctg():
    win = Tk()
    win["bg"]="antiquewhite"
    def fctg(event):
        otn = math.cos(math.radians(int(pole.get())))/math.sin(math.radians(int(pole.get())))
        result.configure(text=str(otn))

    inputer = Label(win, text="Введите число, у которого нужно найти котангенс", bg="antiquewhite").grid(row=24)
    pole = Entry(win)
    pole.bind("<Return>", fctg)
    pole.grid(row=25, column=0)
    result = Label(win)
    result.grid(row=26, column=0)
    win.mainloop()

def log():
    win = Tk()
    win["bg"]="antiquewhite"
    def flog(event):
        result.configure(text=str(math.log(int(pole.get()), int(pole1.get()))))

    inputer = Label(win, text="Введите число, у которого нужно найти логарифм", bg="antiquewhite").grid(row=27)
    pole = Entry(win)
    inputer = Label(win, text="Введите основание логарифма", bg="antiquewhite").grid(row=29)
    pole1 = Entry(win)
    pole1.grid(row=30, column=0)
    pole1.bind("<Return>", flog)
    pole.grid(row=28, column=0)
    result = Label(win)
    result.grid(row=31, column=0)
    win.mainloop()

def ur():
    def fur(event):
        result.configure(text=str(mml.equation(pole.get())))
    win = Tk()
    win["bg"]="antiquewhite"
    inputer = Label(win, text="Введите уравнение, переменную обозначьте за х, х в квадрате обозначьте х**2, если коэффициент при х = 1, он все равно ставится", bg="antiquewhite").grid(row=32)
    inputer1 = Label(win, text="Между переменной и коэффициентом пробел не ставится, между слагаемым и знаком - ставится", bg="antiquewhite").grid(row=33)
    pole = Entry(win, width = 78)
    pole.grid(row=34, column=0)
    pole.bind("<Return>", fur)
    pole.grid(row=36, column=0)
    result = Label(win)
    result.grid(row=37, column=0)
    win.mainloop()

def divisors():
    win = Tk()
    win["bg"]="antiquewhite"
    def fdiv(event):
        res = mml.divisors(int(pole.get()))
        result.configure(text=" Все делители: "+ f"{res}")
    inputer = Label(win, text="Введите число, у которого нужно найти делители", bg="antiquewhite").grid(row=49)
    pole = Entry(win)
    pole.bind("<Return>", fdiv)
    pole.grid(row=50, column=0)
    result = Label(win)
    result.grid(row=51, column=0)
    win.mainloop()

def primedivisors():
    win = Tk()
    win["bg"]="antiquewhite"
    def fprimediv(event):
        res = mml.factorization(int(pole.get()))
        result.configure(text="Простые множители: " + f"{res}")

    inputer = Label(win, text="Введите число, которое нужно разложить", bg="antiquewhite").grid(row=52)
    pole = Entry(win)
    pole.bind("<Return>", fprimediv)
    pole.grid(row=53, column=0)
    result = Label(win)
    result.grid(row=54, column=0)
    win.mainloop()

def evklid():
    win = Tk()
    win["bg"]="antiquewhite"
    def fevklid(event):
        a = int(pole.get())
        b = int(pole1.get())
        nod = mml.NOD(a,b)
        nok = mml.NOK(a,b)
        result.configure(text="НОД = " + f"{nod}" + ", НОК = "+ f"{nok}")
    inputer1 = Label(win, text="Введите 1 число", bg="antiquewhite").grid(row=55)
    pole = Entry(win)
    pole.grid(row=56, column=0)
    inputer2 = Label(win, text="Введите 2 число", bg="antiquewhite").grid(row=57)
    pole1 = Entry(win)
    pole1.bind("<Return>", fevklid)
    pole1.grid(row=58, column=0)
    result = Label(win)
    result.grid(row=59, column=0)
    win.mainloop()

def eratosphene():
    win = Tk()
    win["bg"]="antiquewhite"
    def feratosphen(event):
        n = int(pole.get())
        res = mml.eratosphen(n)
        with open("RESHETO ERATOSPHENA.txt", "w") as f:
            f.write("Все простые числа до " + str(n) + ": " + str(res))
        result = Label(win)
        result.configure(text="Все простые числа до n записаны в файл RESHETO ERATOSPHENA.txt")
        result.grid(row=62, column=0)
    inputer = Label(win, text="Введите число n (верхний предел)", bg="antiquewhite").grid(row=60)
    pole = Entry(win)
    pole.bind("<Return>", feratosphen)
    pole.grid(row=61, column=0)
    win.mainloop()
def cut(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]
def fibonaci():
    win = Tk()
    win["bg"]="antiquewhite"
    def ffibonacci(event):
        res = list(cut(mml.fibonacci(int(pole.get())), 10))
        result = Label(win)
        c = 0
        for i in res:
            result = Label(win)
            result.configure(text=f"{i}")
            result.grid(row=2+c, column=0)
            c +=1
    inputer = Label(win, text="Введите число n (верхний предел)", bg="antiquewhite").grid(row=0)
    pole = Entry(win)
    pole.bind("<Return>", ffibonacci)
    pole.grid(row=1, column=0)
    win.mainloop()

def binomial():
    win = Tk()
    win["bg"]="antiquewhite"
    def fbinomial(event):
        n = int(pole.get())
        k = int(pole1.get())
        res = str(mml.C(k,n))
        result.configure(text=f"{res}")
    inputer1 = Label(win, text="Введите число n (число элементов множества)", bg="antiquewhite").grid(row=86)
    pole = Entry(win)
    pole.grid(row=87, column=0)
    inputer2 = Label(win, text="Введите число k (число элементов подмножества)", bg="antiquewhite").grid(row=88)
    pole1 = Entry(win)
    pole1.bind("<Return>", fbinomial)
    pole1.grid(row=89, column=0)
    result = Label(win)
    result.grid(row=90, column=0)
    win.mainloop()

def sumnat():
    win = Tk()
    win["bg"]="antiquewhite"
    def fsumnat(event):
        k = int(pole.get())
        n = int(pole1.get())
        res = str(mml.summa(k,n))
        result.configure(text=f"{res}")
    inputer1 = Label(win, text="Введите число k (меньшее)", bg="antiquewhite").grid(row=91)
    pole = Entry(win)
    pole.grid(row=92, column=0)
    inputer2 = Label(win, text="Введите число n (большее)", bg="antiquewhite").grid(row=93)
    pole1 = Entry(win)
    pole1.bind("<Return>", fsumnat)
    pole1.grid(row=94, column=0)
    result = Label(win)
    result.grid(row=95, column=0)
    win.mainloop()

def perevod():
    win = Tk()
    win["bg"]="antiquewhite"
    def fperevod(event):
        strnum = pole.get()
        q1 = int(pole1.get())
        q2 = int(pole2.get())
        res = mml.from_q1_to_q2(strnum, q1, q2)
        result.configure(text=f"{res}")
    inputer1 = Label(win, text="Введите число (вместо запятой используйте точку!)", bg="antiquewhite").grid(row=96)
    pole = Entry(win)
    pole.grid(row=97, column=0)
    inputer2 = Label(win, text="Введите систему счисления исходного числа (до 36)", bg="antiquewhite").grid(row=98)
    pole1 = Entry(win)
    pole1.grid(row=99, column=0)
    inputer3 = Label(win, text="Введите систему счисления результата (до 36)", bg="antiquewhite").grid(row=100)
    pole2 = Entry(win)
    pole2.bind("<Return>", fperevod)
    pole2.grid(row=101, column=0)
    result = Label(win)
    result.grid(row=102, column=0)

def CalcInOtherSystem():
    win = Tk()
    win["bg"]="antiquewhite"
    def fcalcos(event):
        St = pole.get()
        q1 = int(pole1.get())
        q2 = int(pole2.get())
        res = str(mml.calc_in_OS(St,q1,q2))
        result.configure(text=f"{res}")

    inputer1 = Label(win, text="Введите выражение(вместо запятой используйте точку, отделяйте числа и знаки пробелами)", bg="antiquewhite").grid(row=103)
    pole = Entry(win, width=78)
    pole.grid(row=104, column=0)
    inputer2 = Label(win, text="Введите его систему счисления (до 36)", bg="antiquewhite").grid(row=105)
    pole1 = Entry(win)
    pole1.grid(row=106, column=0)
    inputer3 = Label(win, text="Введите систему счисления результата (до 36)",
                        bg="antiquewhite").grid(row=107)
    pole2 = Entry(win)
    pole2.bind("<Return>", fcalcos)
    pole2.grid(row=108, column=0)
    result = Label(win)
    result.grid(row=109, column=0)
    win.mainloop()

def randomgenerator():
    win = Tk()
    win["bg"]="antiquewhite"
    def frandomgenerator(event):
        k = int(pole.get())
        n = int(pole1.get())
        res = random.randint(k,n)
        result.configure(text=f"{res}")
    inputer1 = Label(win, text="Введите нижний предел", bg="antiquewhite").grid(row=110)
    pole = Entry(win)
    pole.grid(row=111, column=0)
    inputer2 = Label(win, text="Введите верхний предел", bg="antiquewhite").grid(row=112)
    pole1 = Entry(win)
    pole1.bind("<Return>", frandomgenerator)
    pole1.grid(row=113, column=0)
    result = Label(win)
    result.grid(row=114, column=0)
    win.mainloop()

def passwordgenerator():
    win = Tk()
    win["bg"]="antiquewhite"
    def fpasswordgenerator(event):
        k = int(pole.get())
        lst = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
                      'T', 'U', 'V', 'W', 'X', 'Y', 'Z'] + [str(x) for x in range(0,9)]
        res = ""
        for i in range(k):
            n = random.choice(lst)
            res += n
        result.configure(text=f"{res}")
    inputer1 = Label(win, text="Введите длину пароля", bg="antiquewhite").grid(row=91)
    pole = Entry(win)
    pole.grid(row=92, column=0)
    pole.bind("<Return>", fpasswordgenerator)
    result = Label(win)
    result.grid(row=95, column=0)
    win.mainloop()

def click():
    sel = select.get()
    if sel == "Обычный калькулятор":
        calc()
    elif sel == "Кв.корень":
        square()
    elif sel == "Факториал":
        factoriale()
    elif sel == "SIN(синус)":
        sin()
    elif sel == "COS(косинус)":
        cos()
    elif sel == "TG(тангенс)":
        tg()
    elif sel == "CTG(котангенс)":
        ctg()
    elif sel =="LOG(логарифм)":
        log()
    elif sel == "Решение уравнения":
       ur()
    elif sel == "Делители числа":
        divisors()
    elif sel == "Разложение на простые множители":
        primedivisors()
    elif sel == "НОД и НОК 2 чисел":
        evklid()
    elif sel == "Все простые числа от 2 до n":
        eratosphene()
    elif sel == "Все числа Фибоначчи от 2 до n":
        fibonaci()
    elif sel == "Биномиальный коэффициент":
        binomial()
    elif sel == "Сумма всех натуральных чисел от k до n":
        sumnat()
    elif sel == "Перевод систем счисления":
        perevod()
    elif sel == "Вычисления в других системах счисления":
        CalcInOtherSystem()
    elif sel == "Генератор случайных чисел":
        randomgenerator()
    elif sel == "Генератор паролей":
        passwordgenerator()



win = Tk()
win.title("MathAssistant")
win.geometry("500x600")
win["bg"]="antiquewhite"
hello = Label(win, text="Выберите нужную функцию", font=("Arial Bold", 20), fg="orange4", bg="antiquewhite")
hello.grid(column=0, row=0)

select = Combobox(win)
select["width"] = 39
select["values"] = ("Обычный калькулятор","Кв.корень", "LOG(логарифм)",
                 "SIN(синус)", "COS(косинус)", "TG(тангенс)", "CTG(котангенс)",
                 "Решение уравнения", "Делители числа", "Разложение на простые множители", "НОД и НОК 2 чисел",
                 "Все простые числа от 2 до n", "Все числа Фибоначчи от 2 до n", "Факториал",
                 "Биномиальный коэффициент", "Сумма всех натуральных чисел от k до n",
                 "Перевод систем счисления", "Вычисления в других системах счисления", "Генератор случайных чисел", "Генератор паролей")
select.grid(column=0, row=2)
sel = select.get()


vvod = Button(text="Выбрать", command=click, bg="DarkGoldenrod1")
vvod.grid(column=0, row=3)

win.mainloop()
